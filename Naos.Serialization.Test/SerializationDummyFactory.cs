// --------------------------------------------------------------------------------------------------------------------
// <copyright file="SerializationDummyFactory.cs" company="Naos Project">
//   Copyright 2015 Naos
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Naos.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Serialization.Recipes
{
    using System;

    using FakeItEasy;

    using Naos.Compression.Domain;
    using Naos.Serialization.Domain;
    using Naos.Serialization.Test;

    using OBeautifulCode.AutoFakeItEasy;

    /// <summary>
    /// Create dummy objects for <see cref="Naos.Serialization.Domain" />.
    /// </summary>
    #if !NaosSerializationDomainTest
        [System.Diagnostics.DebuggerStepThrough]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.CodeDom.Compiler.GeneratedCode("Naos.Recipes.InitializeTestProject", "See package version number")]
    #endif
    public class SerializationDummyFactory : IDummyFactory
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SerializationDummyFactory"/> class.
        /// </summary>
        public SerializationDummyFactory()
        {
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(SerializationFormat.Invalid);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(SerializationKind.Invalid);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(SerializationRepresentation.Invalid);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(CompressionKind.Invalid);

            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<TestBase>();
        }

        /// <inheritdoc />
        public Priority Priority => new Priority(1);

        /// <inheritdoc />
        public bool CanCreate(Type type)
        {
            return false;
        }

        /// <inheritdoc />
        public object Create(Type type)
        {
            return null;
        }
    }
}