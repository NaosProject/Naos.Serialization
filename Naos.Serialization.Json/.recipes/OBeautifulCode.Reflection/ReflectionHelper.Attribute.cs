// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ReflectionHelper.Attribute.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Math source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Reflection.Recipes
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using Spritely.Recipes;

    /// <summary>
    /// Provides useful methods related to reflection.
    /// </summary>
#if !OBeautifulCodeReflectionRecipesProject
    internal
#else
    public
#endif
    static partial class ReflectionHelper
    {
        /// <summary>
        /// Gets the specified type of attribute, applied to a specified type.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute to return.</typeparam>
        /// <param name="type">The type to scope the attribute search to.</param>
        /// <returns>
        /// An attribute object of the specified type that has been applied to the specified
        /// enum value or null if no such attribute has been applied.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="type"/> is null.</exception>
        /// <exception cref="InvalidOperationException"><paramref name="type"/> has multiple attributes of type <typeparamref name="TAttribute"/>.  Consider calling <see cref="GetAttributes{T}(Type)"/>.</exception>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "GetAttributes", Justification = "This is spelled correctly.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", MessageId = "System.String.Format(System.String,System.Object,System.Object,System.Object)", Justification = "This is a developer-facing string, not a user-facing string.")]
        public static TAttribute GetAttribute<TAttribute>(
            this Type type)
            where TAttribute : Attribute
        {
            new { type }.Must().NotBeNull().OrThrow();

            var attributes = type.GetAttributes<TAttribute>();
            if (attributes.Count > 1)
            {
                throw new InvalidOperationException($"Type '{type}' has multiple attributes of type '{typeof(TAttribute)}'.  Consider calling {nameof(GetAttributes)}.");
            }

            var result = attributes.SingleOrDefault();
            return result;
        }

        /// <summary>
        /// Gets the specified type of attribute, applied to a specific enum value.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute to return.</typeparam>
        /// <param name="enumValue">The enum value to scope the attribute search to.</param>
        /// <returns>
        /// An attribute object of the specified type that has been applied to the specified
        /// enum value or null if no such attribute has been applied.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="enumValue"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="enumValue"/> is not an Enum.</exception>
        /// <exception cref="InvalidOperationException"><paramref name="enumValue"/> has multiple attributes of type <typeparamref name="TAttribute"/>.  Consider calling <see cref="GetAttributesOnEnumValue{T}(Enum)"/>.</exception>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "GetAttributes", Justification = "This is spelled correctly.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", MessageId = "System.String.Format(System.String,System.Object)", Justification = "This is a developer-facing string, not a user-facing string.")]
        public static TAttribute GetAttributeOnEnumValue<TAttribute>(
            this object enumValue)
            where TAttribute : Attribute
        {
            new { enumValue }.Must().NotBeNull().OrThrow();
            var enumValueAsEnum = enumValue as Enum;
            enumValueAsEnum.Named($"{nameof(enumValue)} as Enum").Must().NotBeNull().OrThrow<ArgumentException>();

            var result = enumValueAsEnum.GetAttributeOnEnumValue<TAttribute>();
            return result;
        }

        /// <summary>
        /// Gets the specified type of attribute, applied to a specific enum value.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attribute to return.</typeparam>
        /// <param name="enumValue">The enum value to scope the attribute search to.</param>
        /// <returns>
        /// An attribute object of the specified type that has been applied to the specified
        /// enum value or null if no such attribute has been applied.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="enumValue"/> is null.</exception>
        /// <exception cref="InvalidOperationException"><paramref name="enumValue"/> has multiple attributes of type <typeparamref name="TAttribute"/>.  Consider calling <see cref="GetAttributesOnEnumValue{T}(Enum)"/>.</exception>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "GetAttributesOnEnumValue", Justification = "This is spelled correctly.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", MessageId = "System.String.Format(System.String,System.Object,System.Object,System.Object)", Justification = "This is a developer-facing string, not a user-facing string.")]
        public static TAttribute GetAttributeOnEnumValue<TAttribute>(
            this Enum enumValue)
            where TAttribute : Attribute
        {
            new { enumValue }.Must().NotBeNull().OrThrow();

            var attributes = enumValue.GetAttributesOnEnumValue<TAttribute>();
            if (attributes.Count > 1)
            {
                throw new InvalidOperationException($"Enum value '{enumValue}' has multiple attributes of type '{typeof(TAttribute)}'.  Consider calling {nameof(GetAttributesOnEnumValue)}.");
            }

            var result = attributes.SingleOrDefault();
            return result;
        }

        /// <summary>
        /// Gets all attributes of a specified type that have been applied to some type.
        /// Only useful when the attribute is configured such that more one instance can be applied.
        /// </summary>
        /// <remarks>
        /// adapted from <a href="http://stackoverflow.com/a/2656211/356790"/>
        /// </remarks>
        /// <typeparam name="TAttribute">The type of the attributes to return.</typeparam>
        /// <param name="type">The type to scope the attribute search to.</param>
        /// <returns>
        /// A collection all attributes of the specified type that have been applied to the specified
        /// enum value or an empty collection if no such attribute has been applied.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="type"/> is null.</exception>
        public static IReadOnlyCollection<TAttribute> GetAttributes<TAttribute>(
            this Type type)
            where TAttribute : Attribute
        {
            new { type }.Must().NotBeNull().OrThrow();

            var attributes = type.GetCustomAttributes(typeof(TAttribute), false);
            var result = attributes.Cast<TAttribute>().ToList().AsReadOnly();
            return result;
        }

        /// <summary>
        /// Gets all attributes of the specified type that have been applied to a specific enum value.
        /// Only useful when the attribute is configured such that more one instance can be applied to an enum value.
        /// </summary>
        /// <typeparam name="TAttribute">The type of the attributes to return.</typeparam>
        /// <param name="enumValue">The enum value to scope the attribute search to.</param>
        /// <returns>
        /// A collection all attributes of the specified type that have been applied to the specified
        /// enum value or an empty collection if no such attribute has been applied.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="enumValue"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="enumValue"/> is not an Enum.</exception>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", MessageId = "System.String.Format(System.String,System.Object)", Justification = "This is a developer-facing string, not a user-facing string.")]
        public static IReadOnlyCollection<TAttribute> GetAttributesOnEnumValue<TAttribute>(
            this object enumValue)
            where TAttribute : Attribute
        {
            new { enumValue }.Must().NotBeNull().OrThrow();
            var enumValueAsEnum = enumValue as Enum;
            enumValueAsEnum.Named($"{nameof(enumValue)} as Enum").Must().NotBeNull().OrThrow<ArgumentException>();

            var result = enumValueAsEnum.GetAttributesOnEnumValue<TAttribute>();
            return result;
        }

        /// <summary>
        /// Gets all attributes of the specified type that have been applied to a specific enum value.
        /// Only useful when the attribute is configured such that more one instance can be applied to an enum value.
        /// </summary>
        /// <remarks>
        /// adapted from <a href="http://stackoverflow.com/a/9276348/356790"/>
        /// </remarks>
        /// <typeparam name="T">The type of the attributes to return.</typeparam>
        /// <param name="enumValue">The enum value to scope the attribute search to.</param>
        /// <returns>
        /// A collection all attributes of the specified type that have been applied to the specified
        /// enum value or an empty collection if no such attribute has been applied.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="enumValue"/> is null.</exception>
        public static IReadOnlyCollection<T> GetAttributesOnEnumValue<T>(
            this Enum enumValue)
            where T : Attribute
        {
            new { enumValue }.Must().NotBeNull().OrThrow();

            var type = enumValue.GetType();
            var member = type.GetMember(enumValue.ToString());
            var attributes = member[0].GetCustomAttributes(typeof(T), false);
            var result = attributes.Cast<T>().ToList().AsReadOnly();
            return result;
        }
    }
}
